#!/bin/bash
#
# Copyright (C) 2015 Savoir-faire Linux, Inc.
#
# Author: mathieu.audat@savoirfairelinux.com
#

set -e

EERROR=1
ESUCCESS=0
PROGNAME=`basename $0`
CQFDRC=".cqfdrc"
DOCKER_FILE=".cqfd/docker/Dockerfile"

## usage() - print usage on stdout
usage() {
cat <<EOF
Usage: $PROGNAME [OPTION ARGUMENT] [COMMAND] [ARGUMENTS]

Options:
    -f <file>           Use file as config file (default .cqfdrc)
    -b <flavor_name>    Target a specific build flavor.

Commands:
    init     Initialize project build container
    run      Run argument(s) inside build container
    release  Run argument(s) and release software
    help     Show this help text

    By default, run is assumed, and the run command is the one
    configured in .cqfdrc.
EOF
}

# cfg_parser() - parse ini-style config files
# Will parse a ini-style config file, and evaluate it to a bash array.
#   Ref: http://theoldschooldevops.com/2008/02/09/bash-ini-parser/
# arg$1: path to ini file
cfg_parser() {
	# bash 4.3 and later break compatibility
	if [ $BASH_VERSINFO -ge 4 -a ${BASH_VERSINFO[1]} -gt 2 ]; then
		local compat=1
		shopt -s compat42
	fi

	ini="$(<$1)"                # read the file
	ini="${ini//[/\[}"          # escape [
	ini="${ini//]/\]}"          # escape ]
	IFS=$'\n' && ini=( ${ini} ) # convert to line-array
	ini=( ${ini[*]//;*/} )      # remove comments with ;
	ini=( ${ini[*]/\    =/=} )  # remove tabs before =
	ini=( ${ini[*]/=\   /=} )   # remove tabs be =
	ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
	ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
	ini=( ${ini[*]/%\\]/ \(} )  # convert text2function (1)
	ini=( ${ini[*]/=/=\( } )    # convert item to array
	ini=( ${ini[*]/%/ \)} )     # close array parenthesis
	ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
	ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
	ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
	ini[0]="" # remove first element
	ini[${#ini[*]} + 1]='}'    # add the last brace
	eval "$(echo "${ini[*]}")" # eval the result

	# restore previous bash behaviour
	[ "$compat" = "1" ] && shopt -u compat42
}

## die() - exit when an error occured
# $@ messages and variables shown in the error message
die() {
	echo "Fatal: $@" 1>&2
	exit $EERROR
}

# docker_build() - Initialize build container
docker_build() {
	config_load
	docker build -q -t "$DOCKER_IMG_NAME" `dirname $DOCKER_FILE`
}

# docker_run() - run command in configured container
# A few implementation details:
#
# - The user executing the build commands inside the container is
#   named 'builder', with the same uid/gid as your user to keep
#   filesystem permissions in sync.
#
# - Your project's source directory is always mapped to ~builder/src/
#
# - Your ~/.ssh directory is mapped to ~builder/.ssh to provide access
#   to the ssh keys (your build may pull authenticated git repos for
#   example).
#
# arg$1: the command string to execute as builder
#
docker_run() {
	[ -z "$JENKINS_URL" ] && local NOJENKINS=1

	# The user may set the CQFD_EXTRA_VOLUMES environment variable
	# to map custom volumes inside his development container.
	if [ -n "$CQFD_EXTRA_VOLUMES" ]; then
		local map EXTRAVOL
		for map in $CQFD_EXTRA_VOLUMES; do
			EXTRAVOL+="-v $map "
		done
	fi

	docker run --privileged -v "$PWD":/home/builder/src \
	       -v ~/.ssh:/home/builder/.ssh \
	       $EXTRAVOL \
	       ${NOJENKINS:+ -ti} \
	       ${SSH_AUTH_SOCK:+ -v $SSH_AUTH_SOCK:/home/builder/.sockets/ssh} \
	       ${SSH_AUTH_SOCK:+ -e SSH_AUTH_SOCK=/home/builder/.sockets/ssh} \
	       $DOCKER_IMG_NAME \
	       /bin/bash -c "groupadd -og $GROUPS -f builders && \
	       useradd -s /bin/bash -u $UID -g $GROUPS builder && \
	       chown $UID:$GROUPS /home/builder && \
	       su builder -p -c \"cd ~builder/src/ && $1\" 2>&1"
}

# make_archive(): Create a release package.
# Note: the --transform option passed to tar allows to move all the
# specified files at the root of the archive. Therefore, you shouldn't
# include two files with the same name in the list of files to
# archive.
make_archive() {
	if [ -z "$RELEASE_FILES" ]; then
		die "No files to archive, check release.files in $CQFDRC"
	fi

	for file in $RELEASE_FILES; do
		[ -f $file ] || die "Cannot create release: missing $file"
	done

	if [ -z "$JOB_NAME" ]; then
		JOB_NAME="local-build"
		BUILD_ID="`date --rfc-3339='date'`"
	fi

	RELEASE_PACKAGE=${JOB_NAME}_${BUILD_ID}.tar.xz
	XZ_OPT=-9 tar --transform "s/.*\///g" -cJf \
		$RELEASE_PACKAGE $RELEASE_FILES
}

# config_load() - load build settings from cqfdrc
# $1: optional "flavor" of the build, is a suffix of command.
config_load() {
	local p_flavor="$1"

	# Load project, build and release settings
	if [ ! -f "$CQFDRC" ]; then
		die "No $CQFDRC file found, cannot continue."
	fi

	IFS="$IFS" cfg_parser "$CQFDRC"

	cfg.section.project
	PROJECT_ORG="$org"
	PROJECT_NAME="$name"

	cfg.section.build
	if [ -n "$p_flavor" ]; then
		local found=0
		for flavor in $flavors; do
			if [ "$flavor" = "$p_flavor" ]; then
				cfg.section."$p_flavor"
				found=1
				break
			fi
		done
		[ $found -eq 0 ] && die "no $p_flavor found in flavor list"
	fi
	BUILD_CMD="$command"

	cfg.section.release
	RELEASE_FILES="$files"

	# This will look like fooinc_reponame
	if [ -n "$PROJECT_ORG" -a -n "$PROJECT_NAME" ]; then
		DOCKER_IMG_NAME="${PROJECT_ORG}_${PROJECT_NAME}"
	else
		die "project.org and project.name not configured"
	fi
}

while [ $# -gt 0 ]; do
	case "$1" in
	help|-h|"--help")
		usage
		exit $ESUCCESS
		;;
	init)
		docker_build
		exit $?
		;;
	-b)
		shift
		FLAVOR="$1"
		;;
	-f)
		shift
		[ -f "$1" ] || die 'No file named "'$1'"'
		CQFDRC="$1"
		;;
	run|release)
		[ "$1" = "release" ] && MAKE_ARCHIVE=1
		if [ $# -gt 1 ]; then
			shift
			echo "WARNING: build cmd ignored because of command line build command"
			BUILD_CMD_ALT="$@"
		fi
		break
		;;
	?*)
		die "Unknown command: $1"
		;;
	*)
		# empty or no argument case
		;;
	esac
	shift
done

config_load $FLAVOR

if [ -n "$BUILD_CMD_ALT" ]; then
	BUILD_CMD=$BUILD_CMD_ALT
elif [ -z "$BUILD_CMD" ]; then
	die "No build.command defined in $CQFDRC !"
fi

docker_run "$BUILD_CMD"
[ "$MAKE_ARCHIVE" = "1" ] && make_archive

exit $ESUCCESS
