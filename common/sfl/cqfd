#!/bin/bash
#
# Copyright (C) 2015 Savoir-faire Linux, Inc.
#
# Author: mathieu.audat@savoirfairelinux.com
#

EERROR=1
ESUCCESS=0

PROGNAME=`basename $0`
TOPDIR=`cd $(dirname $0)/..; pwd`

## usage() - print usage on stdin
usage() {
cat << EOF
Usage: $PROGNAME [OPTIONS]

* If you have a .sflproject: $PROGNAME
* If you want to build with a special command: $PROGNAME -b <"CMD">
* If you want default build command: $PROGNAME <OPTIONS>

Options are:
	-b <build command>		    Specify a build command to pass to
					      docker.
	-g <client_reponame>		    The name of the docker image
					      Default is client_reponame,
					      Note: use before -i
	-j				    Make an archive out of release
					      files
	-i				    Initialize build container.
EOF
}

# cfg_parser() - parse ini-style config files
# Will parse a ini-style config file, and evaluate it to a bash array.
#   Ref: http://theoldschooldevops.com/2008/02/09/bash-ini-parser/
# arg$1: path to ini file
cfg_parser() {
	# bash 4.3 and later break compatibility
	if [ $BASH_VERSINFO -ge 4 -a ${BASH_VERSINFO[1]} -gt 2 ]; then
		shopt -s compat42
	fi

	ini="$(<$1)"                # read the file
	ini="${ini//[/\[}"          # escape [
	ini="${ini//]/\]}"          # escape ]
	IFS=$'\n' && ini=( ${ini} ) # convert to line-array
	ini=( ${ini[*]//;*/} )      # remove comments with ;
	ini=( ${ini[*]/\    =/=} )  # remove tabs before =
	ini=( ${ini[*]/=\   /=} )   # remove tabs be =
	ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
	ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
	ini=( ${ini[*]/%\\]/ \(} )  # convert text2function (1)
	ini=( ${ini[*]/=/=\( } )    # convert item to array
	ini=( ${ini[*]/%/ \)} )     # close array parenthesis
	ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
	ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
	ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
	ini[0]="" # remove first element
	ini[${#ini[*]} + 1]='}'    # add the last brace
	eval "$(echo "${ini[*]}")" # eval the result
}

## die() - exit when an error occured
# $@ messages and variables shown in the error message
die() {
	echo "Fatal: $@" 1>&2
	exit $EERROR
}

#docker_build() - Initialize build container
# $1 docker image name
docker_build() {
	docker build -q -t "$1" `dirname $DOCKER_FILE`
}

## docker_run() - run command in configured container
docker_run() {
	docker run --privileged -v "$PROJECT_PATH":/home/builder/src \
	       -v ~/.ssh:/home/builder/.ssh \
	       -v `dirname $SSH_AUTH_SOCK`:/home/builder/.sockets \
	       -it "$DOCKER_IMG_NAME" \
	       /bin/bash -c "groupadd -og $GROUPS -f builders && \
	       useradd -s /bin/bash -u $UID -g $GROUPS builder && \
	       chown $UID:$GROUPS /home/builder && \
	       su - builder -c \"cd src/ && $1\""
}

PROJECT_PATH="${PWD%%/sfl}"
BUILD_DOCKER=0
DISTRO_BUILD_PARAM=
DOCKER_IMG_NAME=""
BUILD_MODEL=
DOCKER_FILE="$TOPDIR/sfl/docker/Dockerfile"
SFL_PROJECT="$TOPDIR/.sflproject"
BUILD_CMD=
RELEASE_FILES=
MAKE_ARCHIVE=0

### main ###

# The .sflproject file allows per-project customizations
if [ -f "$SFL_PROJECT" ]; then
	cfg_parser "$SFL_PROJECT"

	# Load customer, build and release settings
	cfg.section.customer
	CUST_CODENAME="$codename"
	CUST_PROJECT="$project"

	cfg.section.build
	BUILD_CMD="$command"

	cfg.section.release
	RELEASE_FILES="$files"
fi

# This will look like fooinc_reponame
if [ -n "$CUST_CODENAME" -a -n "$CUST_PROJECT" ]; then
	DOCKER_IMG_NAME="${CUST_CODENAME}_${CUST_PROJECT}"
fi

while getopts "ijhb:g:" OPTION; do
	case "$OPTION" in
	h)
		usage
		exit $ESUCCESS
		;;
	b)
		BUILD_CMD="$OPTARG"
		;;
	g)
		DOCKER_IMG_NAME="$OPTARG"
		;;
	j)
		MAKE_ARCHIVE=1
		;;
	i)
		# We expect a Dockerfile is always present
		[ -f "$DOCKER_FILE" ] || die " $DOCKER_FILE not found"
		[ -n "$DOCKER_IMG_NAME" ] || die "No customer codename set"
		docker_build $DOCKER_IMG_NAME
		exit $?
		;;
	*)
		die "Unknown parameter $OPTION"
		;;
	esac
done

if [ -z "$BUILD_CMD" ]; then
	die "No build.command defined in .sflproject !"
fi

# Run our build command inside the build container
docker_run "$BUILD_CMD"

# Create a release package
if [ "$MAKE_ARCHIVE" = "1" ]; then
	if [ -z "$RELEASE_FILES" ]; then
		die "No files to archive, check release.files in $SFL_PROJECT"
	fi

	for file in $RELEASE_FILES; do
		[ -f $file ] || die "Cannot create release: missing $file"
	done

	if [ -z "$JOB_NAME" ]; then
		JOB_NAME="local-build"
		BUILD_ID="`date --rfc-3339='date'`"
	fi

	RELEASE_PACKAGE=${JOB_NAME}_${BUILD_ID}.tar.xz
	XZ_OPT=-9 tar --transform "s/.*\///g" -cJf \
		$RELEASE_PACKAGE $RELEASE_FILES
fi

exit $ESUCCESS
